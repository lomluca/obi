# The two configurations below are just for testing purposes
masterHost: 35.234.75.53
masterPort: 8081

# Default ports on which services will listen
defaultMasterPort: 8081
defaultHeartbeatPort: 8080
defaultPredictorPort: 8008

# IP address of the machine hosting the heartbeat service
heartbeatServiceIp: 10.156.0.24

# Default selector name used by services to attach to deployments
defaultServiceSelectorName: app

# Default name used by the deployments to retrieve their config map
defaultConfigMapName: config-map.yaml

# Number of replicas to create when creating a new infrastructure
masterReplicas: 1

# Number of replicas to create when creating a new predictor service
predictorReplicas: 3

# Supported types: kubernetes/k8s, local
deploymentPlatform: kubernetes

# Deployment specific configs
kubernetesNamespace: obi

# Supported job types
supportedJobTypes:
  - name: PySpark

# The set of namespaces which will be scanned by the client while
# performing the infrastructure service discovery
namespaces:
  - name: obi

# Docker image of the OBI master deployment
masterImage: eu.gcr.io/dhg-data-intelligence-ops/obi-master

# Docker image for the OBI predictor component
predictorImage: eu.gcr.io/dhg-data-intelligence-ops/obi-predictor

# Where to mount the secret within the master's container
secretMountPath: /etc/sa

# Where to mount the configuration file within master's container
configMountPath: /etc/config

# Extra metadata for deployments
typeMetadata: type
masterType: master
predictorType: predictor
masterServiceName: master-service-name
heartbeatServiceName: heartbeat-service-name
predictorServiceName: predictor-service-name
predictorDeploymentName: predictor-deployment-name
serviceAccountSecretName: service-account-secret
masterConfigMapName: master-config-map

# Extra metadata for services
serviceTypeMetadata: type
masterServiceType: master=service
heartbeatServiceType: heartbeat-service
predictorServiceType: predictor-service

# Node on which schedule the pods
nodeSelectorKey: cloud.google.com/gke-nodepool
nodeSelectorValue: base
